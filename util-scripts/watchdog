#!/bin/bash

source "$(dirname "$(readlink -f "$0")")/../helpers.sh" || {
    echo "Error: Could not source helpers.sh"
    exit 1
}

# Define the DISPLAY_CONFIG_FILE using the sourced paths
DISPLAY_CONFIG_FILE="$PLAYER_CONFIG_DIR/display.conf"

# Read values from config file
source "$DISPLAY_CONFIG_FILE"

# Define the log directory and file
WATCHDOG_LOG_DIR="$PLAYER_LOGS_DIR/watchdog"
mkdir -p "$WATCHDOG_LOG_DIR"
TODAY=$(date +"%Y-%m-%d")
WATCHDOG_LOG_FILE="$WATCHDOG_LOG_DIR/$TODAY.log"

# Function to log messages
log_message() {
    echo "$(date +'%Y-%m-%d %H:%M:%S') - $1" | tee -a "$WATCHDOG_LOG_FILE"
}

# Generate the log start message
LOG_START_MSG="### $(date +"%Y-%m-%d %H:%M:%S") - Watchdog script started ###"

# Calculate the length of the log start message
MSG_LENGTH=${#LOG_START_MSG}

# Generate a line of '#' characters of the same length
LINE=$(printf '%*s' "$MSG_LENGTH" | tr ' ' '#')

# Log the script run with timestamp. Add a new line before the log entry.
echo -e "\n$LINE\n$LOG_START_MSG\n$LINE\n" >>"$WATCHDOG_LOG_FILE"

check_lightdm_service() {
    log_message "Checking lightdm service..."
    if systemctl status lightdm.service | grep -q "pam_succeed_if(lightdm:auth)"; then
        log_message "lightdm service check failed."
        log_message "$(systemctl status --no-pager lightdm.service)" # Log the status of the service
        return 1
    else
        log_message "lightdm service check passed."
        return 0
    fi
}

check_display() {
    log_message "Checking display setup..."
    output=$(/usr/bin/python3 "$PLAYER_UTIL_SCRIPTS_DIR/gnome-randr.py" | cat -A)

    # Extract the actual refresh rate from the output
    actual_rate=$(echo "$output" | grep -oP "$PREFERRED_RESOLUTION\s+\K[0-9.]+(?=\*)")

    # Function to compare refresh rates with tolerance
    compare_rates() {
        local rate1=$(printf "%.2f" $1)
        local rate2=$(printf "%.2f" $2)
        local diff=$(awk "BEGIN {print sqrt(($rate1-$rate2)^2)}")
        awk "BEGIN {exit !($diff <= 0.1)}" # True if difference is 0.1 or less
    }

    if [[ $output == *"logical monitor 0"* ]] &&
        [[ $output =~ "$PREFERRED_RESOLUTION".*"$actual_rate".*"[*]".*"$" ]] &&
        compare_rates $PREFERRED_RATE $actual_rate &&
        [[ $output == *"rotation: $ROTATE"* ]] &&
        [[ $output == *"scale: $SCALE"* ]]; then
        log_message "Display setup check passed. Actual refresh rate: $actual_rate Hz"
        return 0
    else
        log_message "Display setup check failed."
        log_message "Display setup is: $output"
        log_message "Preferred rate: $PREFERRED_RATE Hz, Actual rate: $actual_rate Hz"
        return 1
    fi
}

# Initialize a counter for the activating state
ACTIVATING_COUNTER=0
check_slideshow_service() {
    log_message "Checking slideshow-player service..."
    service_status=$(systemctl is-active slideshow-player.service) # Store the status of the service
    if [[ $service_status == "active" ]]; then
        # Check if chromium-browser is running as part of the service
        if systemctl status slideshow-player.service | grep -q "chromium-browser"; then
            log_message "slideshow-player service check passed."
            ACTIVATING_COUNTER=0 # Reset the counter
            return 0
        else
            log_message "slideshow-player service is running but chromium-browser is not started."
            log_message "$(systemctl status --no-pager slideshow-player.service)" # Log the status of the service
            return 1
        fi
    elif [[ $service_status == "activating" ]]; then
        ACTIVATING_COUNTER=$((ACTIVATING_COUNTER + 1)) # Increment the counter
        if [[ $ACTIVATING_COUNTER -le 3 ]]; then
            log_message "slideshow-player service is activating. Waiting..."
            return 0
        else
            log_message "slideshow-player service is still activating after 30 seconds. Restarting..."
            ACTIVATING_COUNTER=0 # Reset the counter
            return 1
        fi
    else
        log_message "slideshow-player service check failed."
        log_message "slideshow-player service is: $service_status" # Log the status of the service
        return 1
    fi
}

restart_services() {
    # Check the status of the lightdm service
    check_lightdm_service

    # If the service is not running correctly, restart it
    if [ $? -eq 1 ]; then
        log_message "lightdm service is not running correctly. Restarting..."
        sudo systemctl restart lightdm.service

        # Wait for the service to restart
        sleep 10

        # Check the status of the lightdm service again
        check_lightdm_service

        # If the service is still not running correctly, log a message
        if [ $? -eq 1 ]; then
            log_message "lightdm service failed to restart correctly."
            return 1
        fi
    fi

    # Check the display setup
    check_display

    # If the display is not set up correctly, restart the display-setup service
    if [ $? -eq 1 ]; then
        log_message "Display is not set up correctly. Restarting display-setup service..."
        sudo systemctl restart display-setup.service
    fi

    # Check the status of the slideshow-player service
    check_slideshow_service

    # If the service is not running correctly, restart it
    if [ $? -eq 1 ]; then
        log_message "slideshow-player service is not running correctly. Restarting..."
        sudo systemctl restart slideshow-player.service
    fi

    # Log a message indicating that all checks have been completed
    log_message "All checks completed."
}

# Run the watchdog indefinitely
while true; do
    # Restart services if necessary
    restart_services

    # Wait for a specified interval before the next iteration
    sleep 10
done
