#!/bin/bash

source "$(dirname "$(readlink -f "$0")")/../helpers.sh" || {
    echo "Error: Could not source helpers.sh"
    exit 1
}

# Function to check if required variables are set
check_env_vars() {
    local required_vars=("PLAYER_ROOT_DIR" "ORANGEAD_ROOT_DIR" "PLAYER_LOGS_DIR")
    for var in "${required_vars[@]}"; do
        if [ -z "${!var}" ]; then
            log_error "$OASYNC_LOG_FILE" "Environment variable $var is not set"
            exit 1
        fi
    done
}

# Move project directory if needed
move_project_directory() {
    local project_dir_name=$(basename "$PLAYER_ROOT_DIR")
    if [[ "$PLAYER_ROOT_DIR" != "$ORANGEAD_ROOT_DIR/$project_dir_name" ]]; then
        local new_location="$ORANGEAD_ROOT_DIR/$project_dir_name"
        log_info "$OASYNC_LOG_FILE" "Ensuring $project_dir_name directory is in $new_location..."

        if [ -d "$new_location" ]; then
            mv "$new_location" "$new_location.bak" || {
                log_error "$OASYNC_LOG_FILE" "Could not rename existing $new_location to $new_location.bak"
                exit 1
            }
        fi

        mkdir -p "$ORANGEAD_ROOT_DIR"
        mv "$PLAYER_ROOT_DIR" "$new_location" || {
            log_error "$OASYNC_LOG_FILE" "Could not move $PLAYER_ROOT_DIR to $new_location"
            exit 1
        }

        # Update PLAYER_ROOT_DIR to the new location
        PLAYER_ROOT_DIR="$new_location"
        PLAYER_RELEASES_DIR="$PLAYER_ROOT_DIR/releases"
        PLAYER_LOGS_DIR="$PLAYER_ROOT_DIR/logs"
        PLAYER_CONFIG_DIR="$PLAYER_ROOT_DIR/config"
        PLAYER_INIT_SCRIPTS_DIR="$PLAYER_ROOT_DIR/init-scripts"
        PLAYER_SYSTEMD_DIR="$PLAYER_ROOT_DIR/systemd"
        PLAYER_UTIL_SCRIPTS_DIR="$PLAYER_ROOT_DIR/util-scripts"

        log_info "$OASYNC_LOG_FILE" "$project_dir_name directory moved to $new_location"
    else
        log_info "$OASYNC_LOG_FILE" "$project_dir_name directory is already in the correct location."
    fi
}

# Check for changes and manage stashes
manage_stashes() {
    local dirs_to_exclude="$PLAYER_CONFIG_DIR/"
    cd "$PLAYER_ROOT_DIR" || {
        log_error "$OASYNC_LOG_FILE" "Could not navigate to $PLAYER_ROOT_DIR"
        exit 1
    }

    local current_date=$(date +"%Y-%m-%d %H:%M:%S")
    local current_commit=$(git rev-parse --short HEAD)
    local current_branch=$(git symbolic-ref --short HEAD)

    if [[ "$current_branch" == "dev" ]]; then
        dirs_to_exclude=""
    fi

    if git diff --quiet; then
        log_info "$OASYNC_LOG_FILE" "No changes to stash"
    else
        git stash push -u -m "Temp stash for comparison" -- $dirs_to_exclude >/dev/null 2>&1 || {
            log_error "$OASYNC_LOG_FILE" "Could not create temporary stash"
            exit 1
        }

        if git stash list | grep -q 'stash@{1}' && git diff stash@{0} stash@{1} --quiet; then
            log_info "$OASYNC_LOG_FILE" "Changes in directories are the same as the last stash"
            git stash drop stash@{0} >/dev/null 2>&1 || {
                log_error "$OASYNC_LOG_FILE" "Could not drop temporary stash"
                exit 1
            }
        else
            git stash apply stash@{0} >/dev/null 2>&1 || {
                log_error "$OASYNC_LOG_FILE" "Could not apply temporary stash"
                exit 1
            }
            git stash push -u -m "Date: $current_date, Commit: $current_commit" -- $dirs_to_exclude >/dev/null 2>&1 || {
                log_error "$OASYNC_LOG_FILE" "Could not create new stash"
                exit 1
            }
            git stash drop stash@{1} >/dev/null 2>&1 || {
                log_error "$OASYNC_LOG_FILE" "Could not drop temporary stash"
                exit 1
            }
        fi
    fi
}

# Pull the latest changes from the repository
pull_latest_changes() {
    git pull || {
        log_error "$OASYNC_LOG_FILE" "Could not pull latest changes"
        exit 1
    }
}

# Apply stashed changes
apply_stashed_changes() {
    if git stash list | grep -q 'stash@{0}'; then
        git stash apply stash@{0} || {
            log_error "$OASYNC_LOG_FILE" "Could not apply stashed changes"
            exit 1
        }
    else
        log_info "$OASYNC_LOG_FILE" "No stashes to apply"
    fi
}

# Manage oaDeviceAPI for device environments only
manage_device_api() {
    if ! should_manage_device_api; then
        log_api_info "Skipping oaDeviceAPI management (not a device environment or disabled)" "$OASYNC_LOG_FILE"
        log_device_detection "$OASYNC_LOG_FILE"
        return 0
    fi

    log_api_info "Managing oaDeviceAPI for device environment..." "$OASYNC_LOG_FILE"
    log_device_detection "$OASYNC_LOG_FILE"
    
    # Load configuration
    load_unified_api_config
    
    local api_dir=$(get_device_api_dir)
    local api_repo_url="https://github.com/oa-device/oaDeviceAPI.git"
    local max_retries="${CLONE_RETRY_COUNT:-3}"
    local retry_delay="${CLONE_RETRY_DELAY:-5}"
    local retry_count=0

    log_api_debug "Target directory: $api_dir" "$OASYNC_LOG_FILE"
    log_api_debug "Repository URL: $api_repo_url" "$OASYNC_LOG_FILE"
    log_api_debug "Max retries: $max_retries" "$OASYNC_LOG_FILE"

    # Ensure parent directory exists
    mkdir -p "$ORANGEAD_ROOT_DIR" || {
        log_api_error "Could not create Orangead root directory: $ORANGEAD_ROOT_DIR" "$OASYNC_LOG_FILE"
        return 1
    }

    # Clone or update oaDeviceAPI
    if [ ! -d "$api_dir" ]; then
        log_api_info "Cloning oaDeviceAPI to $api_dir..." "$OASYNC_LOG_FILE"
        
        while [ $retry_count -lt $max_retries ]; do
            if timeout "${NETWORK_TIMEOUT:-30}" git clone "$api_repo_url" "$api_dir" 2>/dev/null; then
                log_api_info "Successfully cloned oaDeviceAPI" "$OASYNC_LOG_FILE"
                break
            else
                retry_count=$((retry_count + 1))
                log_api_warn "Clone attempt $retry_count/$max_retries failed, retrying in ${retry_delay}s..." "$OASYNC_LOG_FILE"
                sleep "$retry_delay"
            fi
        done

        if [ $retry_count -eq $max_retries ]; then
            log_api_error "Failed to clone oaDeviceAPI after $max_retries attempts" "$OASYNC_LOG_FILE"
            return 1
        fi
    else
        log_api_info "Updating existing oaDeviceAPI..." "$OASYNC_LOG_FILE"
        
        cd "$api_dir" || {
            log_api_error "Could not navigate to $api_dir" "$OASYNC_LOG_FILE"
            return 1
        }

        # Check current state
        local current_commit=$(git rev-parse --short HEAD 2>/dev/null)
        log_api_debug "Current commit: $current_commit" "$OASYNC_LOG_FILE"

        # Reset any local changes and pull latest
        git reset --hard HEAD >/dev/null 2>&1
        git clean -fd >/dev/null 2>&1
        
        while [ $retry_count -lt $max_retries ]; do
            if timeout "${NETWORK_TIMEOUT:-30}" git pull origin main >/dev/null 2>&1; then
                local new_commit=$(git rev-parse --short HEAD 2>/dev/null)
                log_api_info "Successfully updated oaDeviceAPI ($current_commit -> $new_commit)" "$OASYNC_LOG_FILE"
                break
            else
                retry_count=$((retry_count + 1))
                log_api_warn "Pull attempt $retry_count/$max_retries failed, retrying in ${retry_delay}s..." "$OASYNC_LOG_FILE"
                sleep "$retry_delay"
            fi
        done

        if [ $retry_count -eq $max_retries ]; then
            log_api_error "Failed to update oaDeviceAPI after $max_retries attempts" "$OASYNC_LOG_FILE"
            return 1
        fi

        cd "$PLAYER_ROOT_DIR" || {
            log_api_error "Could not return to player root directory" "$OASYNC_LOG_FILE"
            return 1
        }
    fi

    # Run migration script if available and not already migrated
    local migration_marker="$PLAYER_LOGS_DIR/.unified_api_migrated"
    if [ -f "$PLAYER_ROOT_DIR/util-scripts/api-migrate.sh" ] && [ ! -f "$migration_marker" ] && [ "$AUTO_MIGRATE" != "false" ]; then
        log_api_info "Running unified API migration..." "$OASYNC_LOG_FILE"
        if "$PLAYER_ROOT_DIR/util-scripts/api-migrate.sh" 2>&1 | tee -a "$OASYNC_LOG_FILE"; then
            touch "$migration_marker"
            log_api_info "Unified API migration completed successfully" "$OASYNC_LOG_FILE"
        else
            log_api_warn "Unified API migration failed, will retry next sync" "$OASYNC_LOG_FILE"
        fi
    elif [ -f "$migration_marker" ]; then
        log_api_debug "Migration already completed (marker exists)" "$OASYNC_LOG_FILE"
    fi

    log_api_info "oaDeviceAPI management completed successfully" "$OASYNC_LOG_FILE"
    return 0
}

# Run custom setup and player scripts
run_oa_scripts() {
    "$PLAYER_UTIL_SCRIPTS_DIR/oasetup" || {
        log_error "$OASYNC_LOG_FILE" "Could not run oasetup"
        exit 1
    }
    "$PLAYER_UTIL_SCRIPTS_DIR/oaplayer" || {
        log_error "$OASYNC_LOG_FILE" "Could not run oaplayer"
        exit 1
    }
}

# Main script execution
main() {
    check_env_vars

    # Ensure log directory is set correctly after sourcing the config
    OASYNC_LOG_DIR="$PLAYER_LOGS_DIR/oasync"
    TODAY=$(date +"%Y-%m-%d")
    OASYNC_LOG_FILE="$OASYNC_LOG_DIR/$TODAY.log"

    # Ensure the log directory exists
    mkdir -p "$OASYNC_LOG_DIR" || {
        echo "Error: Could not create log directory $OASYNC_LOG_DIR"
        exit 1
    }

    move_project_directory
    manage_stashes
    pull_latest_changes
    apply_stashed_changes
    manage_device_api
    run_oa_scripts
}

main